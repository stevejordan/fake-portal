Documentation for the client side "portal" page

* Architechture
  From back to front end.

  1. Source --> 
    2. php on webapps --> 
      3. Matrix rest resource -->
         4. backbone.js on client

  the client side script (4) makes a request to matrix (3) (to obey
  same domain restrictions - this might become Apache proxying in
  future), which makes a request to a php resource (2) on
  webapps.city, which is responsible for getting and caching the
  source data (1).

* Codebase
  The frontend is done using [[http://backbonejs.org/][backbone.js]], which is an MV*
  framework. It organises the code into models, collections and
  views. The view is where the majority of the work is done. So far we
  have the following models, collections and views:
** models
*** Person
    currently unused, will eventually need to grab data from AD,
    evision, moodle etc.
*** Course
    a course from moodle
*** Book
    a book currently on loan from a library
*** Hold
    a book hold requested from a library
*** Fine
    a library fine, historical or due
*** CalendarItem
    a (moodle currently) calendar entry

** collections
   all groupings of instances of the above models
*** CoursesCollection
*** BooksCollection
*** HoldsCollection
*** FinesCollection
*** AbstractCollection
*** LibraryCollection
*** Calendar

** views
*** FakePortalView
    the 'main' view which kicks the app off
*** PersonView
    currently unused
*** CourseView
*** BookView
*** HoldView
*** FineView
*** CalendarView


* Data sources

** moodle
   based on work done by Amanda using moodle2 api

   Amanda's code is in msm2an0:/web/docs/webapps/moodle/portal
   amends/overloads in msm2an0:/web/docs/webapps/matrix/services/portal-poc/index.php
   These should be merged into better structured php

   url Matrix hits is webapps.test.city.ac.uk/matrix/portal-poc/index.php

** millenium
   using UQL_Millenium classes to structure the liasing with millenuim api
   work done in msm2an0:/web/docs/webapps/matrix/services/portal-poc/millenium-uql.php

   Lucy Clifford's test account is under her username sbbb134

* Future data sources

* git setup
  We have a central repo served from
  msman0:/web/ci/git-repos/fkeportal.git master on this is the one to
  push/pull from.

  There is a live version of the app hosted on mam2an0 (webapps.test)
  viewable at [[webapps.test.city.ac.uk/portal-poc][webapps.test.city.ac.uk/portal-poc]]

  To update this you need to log into msm2an0.unix2.test as s1sync
  and:

  #+BEGIN_SRC sh
cd /web/docs/webapps/portal-poc
git pull
  #+END_SRC
  

* Advantages to client side aproach

** Standards
   open web standards that are practised by a large pool of
   people. Which could quickly and cheaply lead to team expansion with
   contractors/extra headcount.
** skills
   in house dev expertise can already handle the work.
** Development environment
   no expensive software needed (in contrast to RAD), only requires a
   lightweight local dev environment - no compilation stage.
** Quick to iterate
   ideas can very cheaply be worked up and tested.
** Mobile ready
   small screen display baked in from the start
** Loose coupling
   it is very loosely coupled with Matrix and could easily sit
   directly in front of Moodle, or another backend system.
** SSO
   only depends on which backend system it serves. If the backend is
   setup to accept it, it will work.
