Documentation for the client side "portal" page

* Architechture
  From front to back end.

  1. Source --> 2. php on webapps --> Matrix rest resource --> backbone.js on client

  the client side script (using backbone.js) makes a request to matrix
  (to obey same domain restrictions - this might become Apache
  proxying in future), which makes a request to a php resource on
  webapps.city, which is responsible for getting and caching the
  source data.
                               
* Codebase
  The frontend is done using [[http://backbonejs.org/][backbone.js]], which is an MV*
  framework. It organises the code into models, collections and
  views. The view is where the majority of the work is done. So far we
  have the following models, collections and views:
** models  
*** Person
    currently unused, will eventually need to grab data from AD,
    evision, moodle etc.
*** Course
    a course from moodle
*** Book
    a book currently on loan from a library
*** Hold
    a book hold requested from a library
*** Fine
    a library fine, historical or due
*** CalendarItem
    a (moodle currently) calendar entry

** collections
*** CoursesCollection
*** BooksCollection
*** HoldsCollection
*** FinesCollection
*** AbstractCollection
*** LibraryCollection
*** Calendar

** views
*** FakePortalView
    the 'main' view which kicks the app off
*** PersonView
    currently unused
*** CourseView
*** BookView
*** HoldView
*** FineView
*** CalendarView


* Data sources

** moodle
   based on work done by Amanda using moodle2 api

   Amanda's code is in msm2an0:/web/docs/webapps/moodle/portal
   amends/overloads in msm2an0:/web/docs/webapps/matrix/services/portal-poc/index.php
   These should be merged into better structured php

   url Matrix hits is webapps.test.city.ac.uk/matrix/portal-poc/index.php

** millenium
   using UQL_Millenium classes to structure the liasing with millenuim api
   work done in msm2an0:/web/docs/webapps/matrix/services/portal-poc/millenium-uql.php

* Future data sources
 
